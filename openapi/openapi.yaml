openapi: 3.0.0
info:
  title: API
  version: 1.0.0

paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    delete:
      summary: Delete a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found

    patch:
      operationId: patchTask
      summary: Partially update a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Fields to update in the task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

  /users:
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: postUser
      tags:
        - users
      requestBody:
        required: true
        description: New user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    patch:
      summary: Update user fields by ID
      operationId: patchUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Fields to update in the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete user by ID
      operationId: deleteUserByID
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /users/{id}/tasks:
    get:
      summary: Get all tasks for a specific user
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of tasks for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          description: Primary key (UUID or string ID from DB)
        title:
          type: string
          description: Task title
        status:
          type: string
          description: Task status
        user_id:
          type: string
          description: ID of the user who owns the task

    TaskRequest:
      type: object
      required:
        - title
        - status
        - user_id
      properties:
        title:
          type: string
          description: Task title
        status:
          type: string
          description: Task status
        user_id:
          type: string
          description: ID of the user who owns the task

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
          description: Task title
        status:
          type: string
          description: Task status
        user_id:
          type: string
          description: ID of the user (optional in patch)

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        password:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          nullable: true

    UserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
